// Copyright 2022 Aspect Build Systems, Inc. All rights reserved.
//
// Original authors: Thulio Ferraz Assis (thulio@aspect.dev)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// GENERATED FILE - DO NOT EDIT!

package client

import (
	"context"
	"fmt"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/balancer/roundrobin"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/keepalive"
	"google.golang.org/grpc/resolver"

	pb "{{ .service_definition }}"
)

{{- range $service := .services }}
// {{ $service.Name }} wraps a pb.{{ $service.Name }}Client by offering the
// Connect and Disconnect methods.
type {{ $service.Name }} interface {
	Connect(ctx context.Context, serverAddr string, extraOpts ...grpc.DialOption) error
	Client() pb.{{ $service.Name }}Client
	Disconnect() error
}

// New{{ $service.Name }} constructs a {{ $service.Name }}.
func New{{ $service.Name }}(loadBalance bool) {{ $service.Name }} {
	return &{{ $service.Name | lower }}{
		loadBalance: loadBalance,
	}
}

type {{ $service.Name | lower }} struct {
	conn *grpc.ClientConn
	client pb.{{ $service.Name }}Client

	loadBalance bool
}

var defaultOptions = []grpc.DialOption{
	// TODO(f0rmiga): do proper mTLS.
	grpc.WithTransportCredentials(insecure.NewCredentials()),
	grpc.WithKeepaliveParams(keepalive.ClientParameters{
		Time: time.Second*10,
		Timeout: time.Second*3,
		PermitWithoutStream: true,
	}),
}

// Connect connects to the {{ $service.Name }} service.
func (c *{{ $service.Name | lower }}) Connect(ctx context.Context, serverAddr string, extraOpts ...grpc.DialOption) error {
	opts := append(defaultOptions, extraOpts...)
	if c.loadBalance {
		opts = append(opts, grpc.WithDefaultServiceConfig(fmt.Sprintf(`{"loadBalancingPolicy":"%s"}`, roundrobin.Name)))
		resolver.SetDefaultScheme("dns")
	}
	conn, err := grpc.DialContext(ctx, serverAddr, opts...)
	if err != nil {
		return fmt.Errorf("failed to connect to {{ $service.Name }}: %w", err)
	}
	c.client = pb.New{{ $service.Name }}Client(conn)
	c.conn = conn
	return nil
}

// Client returns the connected client for {{ $service.Name }}.
func (c *{{ $service.Name | lower }}) Client() pb.{{ $service.Name }}Client {
	return c.client
}

// Disconnect disconnects the client from the {{ $service.Name }} service.
func (c *{{ $service.Name | lower }}) Disconnect() error {
	if err := c.conn.Close(); err != nil {
		return fmt.Errorf("failed to close connection to {{ $service.Name }}: %w", err)
	}
	return nil
}
{{- end }}
