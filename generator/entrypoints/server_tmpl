// Copyright 2022 Aspect Build Systems Inc.
// Original authors: Thulio Ferraz Assis (thulio@aspect.dev)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// GENERATED FILE - DO NOT EDIT!

package main

import (
	"context"
	"flag"
	"fmt"
	"net"
	"os"
	"os/signal"
	"syscall"

	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"

	{{- if .enable_grpc_gateway }}
	"errors"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"net/http"
	client "{{ .service_client }}"
	{{- end }}

	"github.com/aspect-build/talkie/logger"
	"github.com/aspect-build/talkie/service"

	pb "{{ .service_definition }}"
	impl "{{ .service_implementation }}"
)

var grpcAddressFlag string
var logLevelFlag string
var httpAddressFlag string

var log logger.Logger

func init() {
	flag.StringVar(&grpcAddressFlag, "grpc-address", "0.0.0.0:50051", "The address for the gRPC server, including port, to listen.")
	flag.StringVar(&logLevelFlag, "log-level", "info", "The log level (panic, fatal, error, warn, info, debug, trace).")
	flag.StringVar(&httpAddressFlag, "http-address", "0.0.0.0:8090", "The address for the HTTP server, including port, to listen. Only used if --enable_grpc_gateway is set to true.")
	flag.Parse()

	setupLogging()
}

func main() {
	ctx := context.Background()
	_ = ctx

	hasErrors := false

	// Instantiate all services.
	serviceDependencies := service.Dependencies{
		Log: log,
	}
{{- range $service := .services }}
	impl{{ $service.Name }} := &impl.{{ $service.Name }}{
		Dependencies: serviceDependencies,
	}
	// Ensure {{ $service.Name }} satisfies service.Talkie.
	var _ service.Talkie = impl{{ $service.Name }}
{{- end}}

	// Call BeforeStart hooks.
{{- range $service := .services }}
	if err := impl{{ $service.Name }}.BeforeStart(); err != nil {
		log.Fatal(err)
	}
{{- end}}

	// Defer the call to BeforeExit hooks.
	defer func(){
{{- range $service := .services }}
		if err := impl{{ $service.Name }}.BeforeExit(); err != nil {
			log.Errorln(err)
			hasErrors = true
		}
{{- end}}
		if hasErrors {
			os.Exit(1)
		}
	}()

	listener, err := net.Listen("tcp", grpcAddressFlag)
	if err != nil {
		log.Fatal(err)
	}
	defer listener.Close()

	grpcServer := grpc.NewServer()

{{- range $service := .services }}
	pb.Register{{ $service.Name }}Server(grpcServer, impl{{ $service.Name }})
{{- end}}

	serveErrors := make(chan error, 1)

	go func() {
		log.Infof("grpc server listening at %v", listener.Addr())
		if err := grpcServer.Serve(listener); err != nil {
			serveErrors <-err
		}
		close(serveErrors)
	}()

{{- if .enable_grpc_gateway }}
	clientConnection, err := client.Connect(ctx, grpcAddressFlag)
	if err != nil {
		log.Fatal(err)
	}

	gatewayMux := runtime.NewServeMux()
	{{- range $service := .services }}
	if err := pb.Register{{ $service.Name }}Handler(ctx, gatewayMux, clientConnection); err != nil {
		log.Fatal(err)
	}
	{{- end}}

	gatewayServer := &http.Server{
		Addr: httpAddressFlag,
		Handler: gatewayMux,
	}

	grpcGatewayServeErrors := make(chan error, 1)

	go func() {
		log.Infof("grpc gateway (http) server listening at %s", httpAddressFlag)
		if err := gatewayServer.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
			grpcGatewayServeErrors <-err
		}
		close(grpcGatewayServeErrors)
	}()

{{- end }}


	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	<-sigs

	log.Infoln("closing grpc server")
	grpcServer.GracefulStop()
{{- if .enable_grpc_gateway }}
	log.Infoln("closing grpc gateway (http) server")
	if err := gatewayServer.Shutdown(ctx); err != nil {
		log.Errorln(err)
		hasErrors = true
	}
{{- end }}

	for err := range serveErrors {
		log.Errorln(err)
		hasErrors = true
	}

{{- if .enable_grpc_gateway }}
	for err := range grpcGatewayServeErrors {
		log.Errorln(err)
		hasErrors = true
	}
{{- end }}
}

func setupLogging() {
	l := logrus.New()
	l.Formatter = &logrus.JSONFormatter{}
	l.Out = os.Stderr
	level, err := logrus.ParseLevel(logLevelFlag)
	if err != nil {
		fmt.Printf("ERROR: %v\n", err)
		os.Exit(1)
	}
	l.Level = level
	log = l
}
