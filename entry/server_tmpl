// Copyright 2022 Aspect Build Systems Inc.
// Original authors: Thulio Ferraz Assis (thulio@aspect.dev)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// GENERATED FILE - DO NOT EDIT!

package main

import (
	"flag"
	"fmt"
	"net"
	"os"

	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"

	"github.com/aspect-build/talkie/logger"

	pb "{{ .Service.Definition }}"
	service "{{ .Service.Implementation }}"
)

var addressFlag string
var logLevelFlag string

var log logger.Logger

func init() {
	flag.StringVar(&addressFlag, "address", "0.0.0.0:50051", "The address, including port, to listen.")
	flag.StringVar(&logLevelFlag, "log-level", "info", "The log level (panic, fatal, error, warn, info, debug, trace).")
	flag.Parse()

	setupLogging()
}

func main() {
	listener, err := net.Listen("tcp", addressFlag)
	if err != nil {
		log.Fatal(err)
	}
	defer listener.Close()

	grpcServer := grpc.NewServer()

{{- range $fn := .Service.RegisterFunctions }}
	pb.{{$fn}}(grpcServer, service.New(log))
{{- end}}

	log.Infof("server listening at %v", listener.Addr())
	if err := grpcServer.Serve(listener); err != nil {
		log.Fatal(err)
	}

	// TODO(f0rmiga): handle graceful shutdowns.
}

func setupLogging() {
	l := logrus.New()
	l.Formatter = &logrus.JSONFormatter{}
	l.Out = os.Stderr
	level, err := logrus.ParseLevel(logLevelFlag)
	if err != nil {
		fmt.Printf("ERROR: %v\n", err)
		os.Exit(1)
	}
	l.Level = level
	log = l
}
